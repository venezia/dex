syntax = "proto3";
option java_package = "com.github.dexidp.dex.api";

package v1alpha1;

// Client-centric messages

// Client represents an OAuth2 client that is managed by the storage provider.
message Client {
  string id = 1;
  string secret = 2;
  repeated string redirect_uris = 3;
  repeated string trusted_peers = 4;
  bool public = 5;
  string name = 6;
  string logo_url = 7;
}

// CreateClientReq is a request to add a client to the storage service.
// Will not work on static clients
message CreateClientReq {
  Client client = 1;
}

// CreateClientResp returns the response from creating a client.
message CreateClientResp {}

// DeleteClientReq is a request to delete a client from the storage service.
// Will not work on static clients
message DeleteClientReq {
  // The ID of the client.
  string id = 1;
}

// DeleteClientResp determines if the client is deleted successfully.
message DeleteClientResp {}

// UpdateClientReq is a request to update an existing client stored in the storage service.
// Will not work on static clients
message UpdateClientReq {
    string id = 1;
    repeated string redirect_uris = 2;
    repeated string trusted_peers = 3;
    string name = 4;
    string logo_url = 5;
}

// UpdateClientResp returns the response form updating a client.
message UpdateClientResp {}

// ListClientsReq is a request to get a list clients
// Will not work on static clients
// TODO Add pagination / sorting when internal API offers it?
message ListClientsReq {}

// ListClientsResp returns an array of non-static clients
// TODO Add pagination information when internal API offers it?
message ListClientsResp {
  repeated Client clients = 1;
}


// Password-centric messages
// Passwords can also be thought of as users that are authenticated by dex itself and not a 3rd party identity provider

// Password is an email for password mapping managed by the storage.
message Password {
  string email = 1;

  // Currently we do not accept plain text passwords. Could be an option in the future.
  bytes hash = 2;
  string username = 3;
  string user_id = 4;
}

// CreatePasswordReq is a request to add a password/user to the storage service.
// Will not work on static passwords
message CreatePasswordReq {
  Password password = 1;
}

// CreatePasswordResp returns the response from creating a password.
message CreatePasswordResp {}

// UpdatePasswordReq is a request to modify an existing password/user stored in the storage service.
// Will not work on static passwords
message UpdatePasswordReq {
  // The email used to lookup the password. This field cannot be modified
  string email = 1;
  bytes new_hash = 2;
  string new_username = 3;
}

// UpdatePasswordResp returns the response from modifying an existing password.
message UpdatePasswordResp {}

// DeletePasswordReq is a request to delete a password/user stored in the storage service.
// Will not work on static passwords
message DeletePasswordReq {
  string email = 1;
}

// DeletePasswordResp returns the response from deleting a password.
message DeletePasswordResp {}

// ListPasswordReq is a request to list the passwords/users stored in the storage service.
message ListPasswordReq {}

// ListPasswordResp returns a list of passwords.
message ListPasswordResp {
  repeated Password passwords = 1;
}

// VerifyPasswordReq will allow someone to verify if a given username and password combination exist in the system
// Will not work on static passwords
message VerifyPasswordReq {
  string email = 1;
  string password = 2;
}

// VerifyPasswordResp returns whether or not there was an email and password match
// If there is no email associated, a NOT_FOUND status will be returned
message VerifyPasswordResp {
  bool verified = 1;
}


// Refresh Token-centric messages

// RefreshTokenRef contains the metadata for a refresh token that is managed by the storage.
message RefreshTokenRef {
  // ID of the refresh token.
  string id = 1;
  string client_id = 2;
  int64 created_at = 5;
  int64 last_used = 6;
}

// ListRefreshReq is a request to enumerate the refresh tokens of a user that is managed by the storage.
message ListRefreshForUserReq {
  // The "sub" claim returned in the ID Token.
  string user_id = 1;
}

// ListRefreshResp returns a list of refresh tokens for a user.
message ListRefreshForUserResp {
  repeated RefreshTokenRef refresh_tokens = 1;
}

// RevokeRefreshReq is a request to revoke the refresh token of the user-client pair that is managed by the storage.
message RevokeRefreshReq {
  // The "sub" claim returned in the ID Token.
  string user_id = 1;
  string client_id = 2;
}

// RevokeRefreshResp determines if the refresh token is revoked successfully.
message RevokeRefreshResp {}


// Misc messages

// VersionReq is a request to fetch version info.
message VersionReq {}

// VersionResp holds the version info of components.
message VersionResp {
  // Semantic version of the server.
  string server = 1;
  // Version of the API. It increases every time a new call is added to the API.
  // Clients should use this info to determine if the server supports specific features.
  string api = 2;
}


// Services

// Dex represents the dex gRPC service.
service Dex {
  // Client-centric RPCs
  // CreateClient creates a client.
  rpc CreateClient(CreateClientReq) returns (CreateClientResp) {};
  // UpdateClient updates an existing client
  rpc UpdateClient(UpdateClientReq) returns (UpdateClientResp) {};
  // DeleteClient deletes the provided client.
  rpc DeleteClient(DeleteClientReq) returns (DeleteClientResp) {};

  // Password-centric RPCs
  // CreatePassword creates a password.
  rpc CreatePassword(CreatePasswordReq) returns (CreatePasswordResp) {};
  // UpdatePassword modifies existing password.
  rpc UpdatePassword(UpdatePasswordReq) returns (UpdatePasswordResp) {};
  // DeletePassword deletes the password.
  rpc DeletePassword(DeletePasswordReq) returns (DeletePasswordResp) {};
  // ListPassword lists all password entries.
  rpc ListPasswords(ListPasswordReq) returns (ListPasswordResp) {};

  // Refresh Token-centric RPCs
  // ListRefresh lists all the refresh token entries for a particular user.
  rpc ListRefreshForUser(ListRefreshForUserReq) returns (ListRefreshForUserResp) {};
  // RevokeRefresh revokes the refresh token for the provided user-client pair.
  rpc RevokeRefresh(RevokeRefreshReq) returns (RevokeRefreshResp) {};
  // VerifyPassword returns whether a password matches a hash for a specific email or not.
  rpc VerifyPassword(VerifyPasswordReq) returns (VerifyPasswordResp) {};

  // Misc RPCs
  // GetVersion returns version information of the server.
  rpc GetVersion(VersionReq) returns (VersionResp) {};
}
